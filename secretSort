/*
In this problem you will need to sort the input numbers into ascending order.

But this is a secret sorting algorithm needed by our super secret encryption algorithm. The rules of the sort are as follows:

The sort doesn't take the sign of the value into account. For instance -1 > 0 as well as 1 > 0. But 2 > -1 and1. Also -2 > -1, and 1. In a general form 0 < (-n|n) < (-n-1| n+1).
When sorting two numbers of equal value then sign is significant and -ve sign is considered the larger value. For instance -2 > 2 and -1 > 1. In general -n > n.
[execution time limit] 3 seconds (java)

[input] array.float input

List of floating point numbers with Positive and negative numbers.

[output] array.float

Sorted list of numbers sorted using the rules in the description.
*/




=============Solution in Java===============
import java.util.ArrayList;

public class test {

	public static void main(String[] args) {
		double[] input = {-1,-12,-13,12};
		System.out.println(SecretSort(input));
	}

	// This method sorts the elements irrespective of the sign.
	static double[] SecretSort(double[] input) {
		ArrayList<Double> numbers = new ArrayList<>();
		double temp;
		for (double i : input) {
			numbers.add(i);
		}
    
		//After looping,Sorts the elements, replaces and adds into the list
		for (int i = 0; i < numbers.size() - 1; i++) {
			for (int j = i + 1; j < numbers.size(); j++) {
				// sorting the elements irrespective of their sign.
				if (Math.abs(numbers.get(i)) > Math.abs(numbers.get(j))) {
					temp = numbers.get(i);
					numbers.set(i, numbers.get(j));
					numbers.set(j, temp);
				}
				// checking for the condition "-n > n."
				if (Math.abs(numbers.get(i)) == Math.abs(numbers.get(j))) {
					if (numbers.get(j) > numbers.get(i)) {
						temp = numbers.get(i);
						numbers.set(i, numbers.get(j));
						numbers.set(j, temp);
					}
				}
			}
		}

		double[] result = new double[numbers.size()];
		for (int i = 0; i < numbers.size(); i++) {
			result[i] = numbers.get(i).doubleValue();
			System.out.println(result[i]);
		}
		return result;
	}

}
